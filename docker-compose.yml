services:
  app:
    container_name: app
    image: bzzni/foodie-app
    build: .
    volumes:
      - ./logs:/foodie-sns/logs
      - ./images:/foodie-sns/images
    depends_on:
      - kafka
      - redis
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - SLACK_TOKEN=${SLACK_TOKEN}
      - USER_PROFILE_IMAGE_DIR=${USER_PROFILE_IMAGE_DIR}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - "80:8080"
    networks:
      - redis
      - kafka
      - monitoring
    restart: on-failure
  redis:
    container_name: redis
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - redis
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafka
    restart: on-failure
  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    networks:
      - kafka
    restart: on-failure
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    user: root
    volumes:
      - ./monitoring/prometheus/config:/etc/prometheus
      - ./monitoring/prometheus/volume:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - monitoring
    restart: always
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    user: root
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/volume:/var/lib/grafana
    networks:
      - monitoring
    restart: always
  node-exporter:
    image: prom/node-exporter
    ports:
      - "9100:9100"
    networks:
      - monitoring
  redis-exporter:
    image: oliver006/redis_exporter
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "local-redis:6379"
      REDIS_USER: null
    networks:
      - monitoring
      - redis
networks:
  redis:
    driver: bridge
  kafka:
    driver: bridge
  monitoring:
    driver: bridge
